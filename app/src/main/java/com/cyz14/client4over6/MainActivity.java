package com.cyz14.client4over6;import android.content.Context;import android.content.Intent;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.net.VpnService;import android.net.wifi.WifiInfo;import android.net.wifi.WifiManager;import android.os.Bundle;import android.os.Environment;import android.os.Handler;import android.os.Message;import android.support.v7.app.ActionBarActivity;import android.util.Log;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.TextView;import android.widget.Toast;import java.io.BufferedInputStream;import java.io.File;import java.io.FileInputStream;import java.io.FileNotFoundException;import java.io.IOException;import java.net.InetAddress;import java.net.NetworkInterface;import java.net.SocketException;import java.util.Enumeration;import java.util.Timer;import java.util.TimerTask;public class MainActivity extends ActionBarActivity {    private static int MAX_BUF = 4096;    int ipPipeFlag = 0;    public static String macAddr;    public static String ipv6Addr;    private static final int MSG_UPDATEUI = 0;    private static String ipv4Addr;    private static String router;    private static String dns1;    private static String dns2;    private static String dns3;    private static String[] info;    byte[] readBuf = new byte[MAX_BUF];//    private static final int MSG_    private Timer mTimer;    private TimerTask mTimerTask;    private Thread mThread;    private Handler mHandler = new Handler() {        public void handleMessage (Message msg) { // in main(UI) thread            switch (msg.what) {                case MSG_UPDATEUI:                    break;                default:                    break;            }        }    };    public native String RequestInfo(); // IP address, route, DNS    static {        System.loadLibrary("connecttoserver");    }    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        final Button connectButton = (Button) findViewById(R.id.ConnectButton);        connectButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Toast.makeText(MainActivity.this, "Trying to start VPN Service",                        Toast.LENGTH_SHORT).show();                File extDir = new File(getApplicationInfo().dataDir);                Log.d("ExtDir", extDir.toString());                File file   = new File(extDir, "cmd_pipe");                //readFIFO(file);                //String tempBuf = readBuf.toString();                //Log.d("FIFO", tempBuf);                String temp = RequestInfo();    // try to connect to server and get ip address                // Log.d("CRunTimeCWD", temp); CRunTimeCWD = "/"                info = temp.split(" ");                if (info.length == 5) {                    Toast.makeText(MainActivity.this, "Got info from server.",                            Toast.LENGTH_SHORT).show();                    EditText editText = (EditText) findViewById(R.id.editText);                    ipv4Addr = info[0];                    router   = info[1];                    dns1     = info[2];                    dns2     = info[3];                    dns3     = info[4];                    editText.append(ipv4Addr + "\n");                    editText.append(router + "\n");                    editText.append(dns1 + "\n");                    editText.append(dns2 + "\n");                    editText.append(dns3 + "\n");                    startVPNService();                    ipPipeFlag = 1;                } else {                    Toast.makeText(MainActivity.this, "Wrong info from server.",                            Toast.LENGTH_SHORT).show();                }                if (ipPipeFlag == 1) {                    connectButton.setEnabled(false);                }            }        });        Button disconnectButton = (Button) findViewById(R.id.DisconnectButton);        disconnectButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Intent intent = new Intent(MainActivity.this, MyVPNService.class);                stopService(intent);            }        });        Button checkButton = (Button) findViewById(R.id.CheckButton);        checkButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Toast.makeText(MainActivity.this, "Checking net status...", Toast.LENGTH_SHORT).show();                if (ipPipeFlag == 0) checkNetStatus();            }        });        Button finishButton  = (Button) findViewById(R.id.FinishButton);        finishButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                finish();            }        });    }    Runnable runnable = new Runnable() {        @Override        public void run() {            // get ipv4 address, route and dns from server        }    };    private boolean isNetConnected() {        ConnectivityManager connectivityManager =                (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);        if (connectivityManager != null) {            NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();            if (networkInfo != null) {                if (networkInfo.isConnected()) {                    return true;                }            }        }        return false;    }    // check if wifi connected    private boolean isWifiConnected() {        ConnectivityManager connectivityManager = (ConnectivityManager)                getSystemService(Context.CONNECTIVITY_SERVICE);        if (connectivityManager != null) {            NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();            if (networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_WIFI) {                return true;            }        }        return false;    }    private void checkNetStatus() {        TextView statusTextView = (TextView) findViewById(R.id.NetworkStatusTextView);        if (!isNetConnected()) {            Toast.makeText(this, "You are not connected to network", Toast.LENGTH_SHORT).show();            statusTextView.append("You are not connected to network" + "\n");            return;        }        if (!isWifiConnected()) {            Toast.makeText(this, "You are not connected by WiFi", Toast.LENGTH_SHORT).show();            statusTextView.append("You are not connected by WiFi\n");            return;        }        statusTextView.append("You are connected by WiFi\n");        macAddr = getMacAddress();        TextView macTextView = (TextView) findViewById(R.id.MacTextView);        macTextView.setText(macAddr);        ipv6Addr = getIPv6Address();        TextView textView = (TextView)findViewById(R.id.IPv6AddressTextView);        textView.setText(ipv6Addr);        Log.d("IPAddress", ipv6Addr);    }    private String getMacAddress() {        WifiManager wifiManager = (WifiManager) getSystemService(WIFI_SERVICE);        WifiInfo wifiInfo = wifiManager.getConnectionInfo();        return wifiInfo.getMacAddress();    }    private String getIPv6Address() {        try {            final Enumeration<NetworkInterface> e = NetworkInterface.getNetworkInterfaces();            while (e.hasMoreElements()) {                final NetworkInterface networkInterface = e.nextElement();                for (Enumeration<InetAddress> enumAddress = networkInterface.getInetAddresses();                     enumAddress.hasMoreElements(); ) {                    InetAddress inetAddress = enumAddress.nextElement();                    if (!inetAddress.isLoopbackAddress() && !inetAddress.isLinkLocalAddress()) {                        return inetAddress.getHostAddress();                    }                }            }        } catch (SocketException e) {            Log.wtf("WIFI_IP", "Unable to NetworkInterface.getNetworkInterfaces()");        }        return null;    }    private boolean startVPNService() {        Intent intent = VpnService.prepare(this);        if (intent != null) {            intent.putExtra("ipv4Addr", ipv4Addr);            intent.putExtra("router", router);            intent.putExtra("dns1", dns1);            intent.putExtra("dns2", dns2);            intent.putExtra("dns3", dns3);            startActivityForResult(intent, 0);        } else {            onActivityResult(0, RESULT_OK, null);        }        return true;    }    protected void onActivityResult(int request, int result, Intent data) {        if (result == RESULT_OK) {            Intent intent = new Intent(this, MyVPNService.class);            intent.putExtra("ipv4Addr", ipv4Addr);            intent.putExtra("router", router);            intent.putExtra("dns1", dns1);            intent.putExtra("dns2", dns2);            intent.putExtra("dns3", dns3);            startService(intent);        }    }    // return the length of read    private int readFIFO(File file) {        FileInputStream fileInputStream;        int readLength = 0;        File dir = new File(Environment.getExternalStorageDirectory().getPath());        File[] dirls = dir.listFiles();        if (dirls != null) {            for (int i = 0; i < dirls.length; ++i) {                Log.d("FIFODir", dirls[i].getAbsolutePath());            }        } else {            Log.e("FIFO", dir.getAbsolutePath());        }        try {            fileInputStream = new FileInputStream(file);            BufferedInputStream in = new BufferedInputStream(fileInputStream);            readLength = in.read(readBuf);            Log.d("IO", readBuf.toString());            in.close();        } catch (FileNotFoundException e) {            Log.e("FILE", "Read pipe file not found");        } catch (IOException e) {            Log.e("IO", "IOException");        }        return readLength;    }    private byte[] intToByteArray(final int integer) {        int byteNum = (40 -Integer.numberOfLeadingZeros (integer < 0 ? ~integer : integer))/ 8;        byte[] byteArray = new byte[4];        for (int n = 0; n < byteNum; n++)            byteArray[3 - n] = (byte) (integer>>> (n * 8));        return (byteArray);    }    public static int byteArrayToInt(byte[] b, int offset) {        int value= 0;        for (int i = 0; i < 4; i++) {            int shift= (4 - 1 - i) * 8;            value +=(b[i + offset] & 0x000000FF) << shift;        }        return value;    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.menu_main, menu);        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        // Handle action bar item clicks here. The action bar will        // automatically handle clicks on the Home/Up button, so long        // as you specify a parent activity in AndroidManifest.xml.        int id = item.getItemId();        //noinspection SimplifiableIfStatement        if (id == R.id.action_settings) {            return true;        }        return super.onOptionsItemSelected(item);    }}